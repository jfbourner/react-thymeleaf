name: publish

on: [push,workflow_dispatch]

jobs:
  job1:
    runs-on: buildjet-2vcpu-ubuntu-2204
    name: Maven build + image build and publish
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up GRAALVM 17
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Package Jar. Re-package layered Jar. Build Image. Push to GHE.
        run: |
          mvn clean -B -ntp -Pnative-arm64,native spring-boot:build-image
        env:
          IMAGE_TAG: latest
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  job2:
    needs: job1
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment:
      name: 'Development'
      url: 'dev.jackbourner.co.uk'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          version-minor: true
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Development deployment'
        run: |
          mvn -B -ntp -P dev dockerfile:tag
          echo $KUBERNETES_PK | base64 --decode > private.key
          echo $KUBERNETES_CRT | base64 --decode > github.crt
          kubectl config set-cluster dev --server=https://jackbourner.co.uk:6443 --insecure-skip-tls-verify=true
          kubectl config set-credentials ghe --client-key=private.key --client-certificate=github.crt --embed-certs=true
          kubectl config set-context dev-context --cluster=dev --namespace=development --user=ghe
          kubectl config use-context dev-context 
          mvn -B -ntp -P dev k8s:resource k8s:apply
        env:
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          KUBERNETES_CRT: ${{ secrets.KUBERNETES_CRT }}
          KUBERNETES_PK: ${{ secrets.KUBERNETES_PK }}
          INGRESS_SECRET: dev-tls
          IMAGE_TAG: 'dev'
          HOSTNAME: 'https://dev.jackbourner.co.uk'
  job3:
    needs: job2
    name: Deploy to Prod
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: 'https://jackbourner.co.uk'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          version-minor: true
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Production deployment'
        run: |
          mvn -B -ntp -P prod dockerfile:tag
          echo $KUBERNETES_PK | base64 --decode > private.key
          echo $KUBERNETES_CRT | base64 --decode > github.crt
          kubectl config set-cluster prod --server=https://jackbourner.co.uk:6443 --insecure-skip-tls-verify=true
          kubectl config set-credentials ghe --client-key=private.key --client-certificate=github.crt --embed-certs=true
          kubectl config set-context prod-context --cluster=prod --namespace=production --user=ghe
          kubectl config use-context prod-context 
          mvn -B -ntp -P prod k8s:resource k8s:apply
        env:
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          KUBERNETES_CRT: ${{ secrets.KUBERNETES_CRT }}
          KUBERNETES_PK: ${{ secrets.KUBERNETES_PK }}
          INGRESS_SECRET: echo-tls
          IMAGE_TAG: prod
          HOSTNAME: 'jackbourner.co.uk'
